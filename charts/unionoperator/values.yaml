# Default values for union-operator.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
union:
  cloudUrl: "<Union Cloud URL>"
  appId: "<App Id from uctl create app>"
  appSecret: "<App Secret from uctl create app>"
  metadataBucketPrefix: s3://my-s3-bucket
  clusterName: ""
  clusterPoolName: "default"
  # Something like 'iam.gke.io/gcp-service-account' for GCP or 'eks.amazonaws.com/role-arn' for AWS
  userRoleAnnotationKey: "foo"
  # Flyte user role with permissions to patch onto project service accounts e.g. arn:aws:iam::ACCOUNT_ID:role/flyte_project_role
  userRoleAnnotationValue: "bar"
  #
  # STORAGE SETTINGS
  #

  storage:
    # -- Sets the storage type. Supported values are sandbox, s3, gcs and custom.
    type: sandbox
    bucketName: my-s3-bucket-prod
    # -- settings for storage type s3
    s3:
      region: us-east-1
    # -- settings for storage type gcs
    gcs:
    # -- GCP project ID. Required for storage type gcs.
    # projectId:
    # -- Settings for storage type custom. See https://github:com/graymeta/stow for supported storage providers/settings.
    custom: { }

  secrets:
    # set to false if you use a different secrets pattern
    create: true
    adminOauthClientCredentials:
      clientSecret: '{{ tpl .Values.appSecret . }}'

  flyteadmin:
    enabled: false
    # TODO: remove this image override once public flyte is release to include a flyteadmin image >= v0.6.91
    image:
      # -- Docker image for Flyteadmin deployment
      repository: cr.flyte.org/flyteorg/flyteadmin
      tag: v0.6.91
      pullPolicy: IfNotPresent
    pullPolicy: IfNotPresent
  flytescheduler:
    enabled: false
  flyteconsole:
    enabled: false
  datacatalog:
    enabled: false
  #
  # FLYTEPROPELLER SETTINGS
  #

  flytepropeller:
    enabled: true
    # -- Replicas count for Flytepropeller deployment
    replicaCount: 1
    # -- Default resources requests and limits for Flytepropeller deployment
    resources:
      limits:
        cpu: "4"
        ephemeral-storage: 500Mi
        memory: "8Gi"
      requests:
        cpu: "1"
        ephemeral-storage: 100Mi
        memory: "500Mi"
    cacheSizeMbs: 0
    client_secret: foobar
    # -- Default regex string for searching configuration files
    configPath: /etc/flyte/config/*.yaml

    # -- Configuration for service accounts for FlytePropeller
    serviceAccount:
      # -- Should a service account be created for FlytePropeller
      create: true
      # -- Annotations for ServiceAccount attached to FlytePropeller pods
      annotations: { }
      # -- ImapgePullSecrets to automatically assign to the service account
      imagePullSecrets: { }
    # -- Annotations for Flytepropeller pods
    podAnnotations: { }
    # -- nodeSelector for Flytepropeller deployment
    nodeSelector: { }
    # -- tolerations for Flytepropeller deployment
    tolerations: [ ]
    # -- affinity for Flytepropeller deployment
    affinity: { }
    clusterName: '
      {{- $previous := lookup "v1" "Secret" (.Release.Namespace) (printf "%v-cluster-name" (include "union-operator.fullname" .)) -}}
      {{- if (tpl .Values.clusterName .) -}}
      {{- (tpl .Values.clusterName .) -}}
      {{- else if $previous -}}
      {{- $previous.data.cluster_name | b64dec -}}
      {{- else -}}
      {{- $newName := include "newClusterName" . -}}
      {{- $newName -}}
      {{- end -}}'
    manager: true
  #
  #
  # CLUSTER RESOURCE MANAGER (SYNC) SETTINGS
  #

  cluster_resource_manager:
    enabled: true
    standalone_deploy: true
    service_account_name: flytepropeller
    config:
      cluster_resources:
        standaloneDeployment: true
        customData:
          - production:
              - projectQuotaCpu:
                  value: "64"
              - projectQuotaMemory:
                  value: "32Gi"
              - projectQuotaNvidiaGpu:
                  value: "1"
              - defaultUserRoleKey:
                  value: '{{ tpl .Values.userRoleAnnotationKey . }}'
              - defaultUserRoleValue:
                  value: '{{ tpl .Values.userRoleAnnotationValue . }}'
          - staging:
              - projectQuotaCpu:
                  value: "64"
              - projectQuotaMemory:
                  value: "32Gi"
              - projectQuotaNvidiaGpu:
                  value: "1"
              - defaultUserRoleKey:
                  value: '{{ tpl .Values.userRoleAnnotationKey . }}'
              - defaultUserRoleValue:
                  value: '{{ tpl .Values.userRoleAnnotationValue . }}'
          - development:
              - projectQuotaCpu:
                  value: "64"
              - projectQuotaMemory:
                  value: "32Gi"
              - projectQuotaNvidiaGpu:
                  value: "1"
              - defaultUserRoleKey:
                  value: '{{ tpl .Values.userRoleAnnotationKey . }}'
              - defaultUserRoleValue:
                  value: '{{ tpl .Values.userRoleAnnotationValue . }}'
    templates:
      # -- Template for namespaces resources
      - key: a_namespace
        value: |
          apiVersion: v1
          kind: Namespace
          metadata:
            name: {{ namespace }}
          spec:
            finalizers:
            - kubernetes

      # -- Patch default service account
      - key: b_default_service_account
        value: |
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: default
            namespace: {{ namespace }}
            annotations:
              {{ defaultUserRoleKey }}: {{ defaultUserRoleValue }}

      - key: c_project_resource_quota
        value: |
          apiVersion: v1
          kind: ResourceQuota
          metadata:
            name: project-quota
            namespace: {{ namespace }}
          spec:
            hard:
              limits.cpu: {{ projectQuotaCpu }}
              limits.memory: {{ projectQuotaMemory }}
              limits.nvidia.com/gpu: {{ projectQuotaNvidiaGpu }}

  #
  # WEBHOOK SETTINGS
  #

  webhook:
    # -- enable or disable secrets webhook
    enabled: true
    # -- Configuration for service accounts for the webhook
    serviceAccount:
      # -- Should a service account be created for the webhook
      create: true
      # -- Annotations for ServiceAccount attached to the webhook
      annotations: { }
      # -- ImapgePullSecrets to automatically assign to the service account
      imagePullSecrets: { }
    # -- Annotations for webhook pods
    podAnnotations: { }
    # -- Service settings for the webhook
    service:
      annotations:
        projectcontour.io/upstream-protocol.h2c: grpc
      type: ClusterIP

  # --------------------------------------------------------------------
  # Specializing your deployment using configuration
  # -------------------------------------------------------------------
  #
  # CONFIGMAPS SETTINGS
  #

  configmap:
    # -- Admin Client configuration [structure](https://pkg.go.dev/github.com/flyteorg/flytepropeller/pkg/controller/nodes/subworkflow/launchplan#AdminConfig)
    admin:
      event:
        type: admin
        rate: 500
        capacity: 1000
      admin:
        endpoint: '{{- printf "dns:///%s" (.Values.cloudUrl | trimPrefix "dns:///" | trimPrefix "http://" | trimPrefix "https://") -}}'
        clientId: '{{ tpl .Values.appId . }}'
        clientSecretLocation: /etc/secrets/client_secret
        insecure: false
    # -- Catalog Client configuration [structure](https://pkg.go.dev/github.com/flyteorg/flytepropeller/pkg/controller/nodes/task/catalog#Config)
    # Additional advanced Catalog configuration [here](https://pkg.go.dev/github.com/lyft/flyteplugins/go/tasks/pluginmachinery/catalog#Config)
    catalog:
      catalog-cache:
        endpoint: '{{- printf "dns:///%s" (.Values.cloudUrl | trimPrefix "dns:///" | trimPrefix "http://" | trimPrefix "https://") -}}'
        type: datacatalog
        insecure: false
        use-admin-auth: true

    # -- Core propeller configuration
    core:
      manager:
        shard:
          type: Hash     # use the "hash" shard strategy
          shard-count: 3 # the total number of shards
      # -- follows the structure specified [here](https://pkg.go.dev/github.com/flyteorg/flytepropeller/pkg/controller/config).
      propeller:
        rawoutput-prefix: '{{ tpl .Values.metadataBucketPrefix $ }}'
        metadata-prefix: metadata/propeller
        workers: 4
        max-workflow-retries: 30
        workflow-reeval-duration: 30s
        downstream-eval-duration: 30s
        limit-namespace: "all"
        prof-port: 10254
        metrics-prefix: flyte
        enable-admin-launcher: true
        leader-election:
          lock-config-map:
            name: propeller-leader
            namespace: flyte
          enabled: false
          lease-duration: 15s
          renew-deadline: 10s
          retry-period: 2s
        queue:
          type: batch
          batching-interval: 2s
          batch-size: -1
          queue:
            type: maxof
            rate: 100
            capacity: 1000
            base-delay: 5s
            max-delay: 120s
          sub-queue:
            type: bucket
            rate: 10
            capacity: 100
        event-config:
          raw-output-policy: inline
      webhook:
        certDir: /etc/webhook/certs
        serviceName: flyte-pod-webhook
      # -- For Workflow store use configuration [here](https://pkg.go.dev/github.com/flyteorg/flytepropeller/pkg/controller/workflowstore#Config)
      #

    enabled_plugins:
      # -- Tasks specific configuration [structure](https://pkg.go.dev/github.com/flyteorg/flytepropeller/pkg/controller/nodes/task/config#GetConfig)
      tasks:
        # -- Plugins configuration, [structure](https://pkg.go.dev/github.com/flyteorg/flytepropeller/pkg/controller/nodes/task/config#TaskPluginConfig)
        task-plugins:
          # -- [Enabled Plugins](https://pkg.go.dev/github.com/lyft/flyteplugins/go/tasks/config#Config). Enable sagemaker*, athena if you install the backend
          # plugins
          enabled-plugins:
            - container
            - sidecar
            - k8s-array
          default-for-task-types:
            container: container
            sidecar: sidecar
            container_array: k8s-array

    # -- Kubernetes specific Flyte configuration
    k8s:
      plugins:
        # -- Configuration section for all K8s specific plugins [Configuration structure](https://pkg.go.dev/github.com/lyft/flyteplugins/go/tasks/pluginmachinery/flytek8s/config)
        k8s:
          default-cpus: 100m
          default-memory: 100Mi

    # -- Logger configuration
    logger:
      logger:
        show-source: true
        level: 4

    # -- Resource manager configuration
    resource_manager:
      # -- resource manager configuration
      propeller:
        resourcemanager:
          type: noop

    # -- Section that configures how the Task logs are displayed on the UI. This has to be changed based on your actual logging provider.
    # Refer to [structure](https://pkg.go.dev/github.com/lyft/flyteplugins/go/tasks/logs#LogConfig) to understand how to configure various
    # logging engines
    task_logs:
      plugins:
        logs:
          kubernetes-enabled: true
          # -- One option is to enable cloudwatch logging for EKS, update the region and log group accordingly
          cloudwatch-enabled: false

  # --------------------------------------------------------
  # Optional Plugins
  # --------------------------------------------------------

  # -- Optional: Spark Plugin using the Spark Operator
  sparkoperator:
    # --- enable or disable Sparkoperator deployment installation
    enabled: false

    # -- Spark plugin configuration
    plugin_config:
      plugins:
        spark:
          # -- Spark default configuration
          spark-config-default:
            # We override the default credentials chain provider for Hadoop so that
            # it can use the serviceAccount based IAM role or ec2 metadata based.
            # This is more in line with how AWS works
            - spark.hadoop.fs.s3a.aws.credentials.provider: "com.amazonaws.auth.DefaultAWSCredentialsProviderChain"
            - spark.hadoop.mapreduce.fileoutputcommitter.algorithm.version: "2"
            - spark.kubernetes.allocation.batch.size: "50"
            - spark.hadoop.fs.s3a.acl.default: "BucketOwnerFullControl"
            - spark.hadoop.fs.s3n.impl: "org.apache.hadoop.fs.s3a.S3AFileSystem"
            - spark.hadoop.fs.AbstractFileSystem.s3n.impl: "org.apache.hadoop.fs.s3a.S3A"
            - spark.hadoop.fs.s3.impl: "org.apache.hadoop.fs.s3a.S3AFileSystem"
            - spark.hadoop.fs.AbstractFileSystem.s3.impl: "org.apache.hadoop.fs.s3a.S3A"
            - spark.hadoop.fs.s3a.impl: "org.apache.hadoop.fs.s3a.S3AFileSystem"
            - spark.hadoop.fs.AbstractFileSystem.s3a.impl: "org.apache.hadoop.fs.s3a.S3A"
            - spark.hadoop.fs.s3a.multipart.threshold: "536870912"
            - spark.blacklist.enabled: "true"
            - spark.blacklist.timeout: "5m"
            - spark.task.maxfailures: "8"
  common:
    ingress:
      enabled: false
  # -----------------------------------------------------
  # Core dependencies that should be configured for Flyte to work on any platform
  # ------------------------------------------------------
  unionoperator:
    priorityClassName: "system-cluster-critical"
    replicaCount: 1

    image:
      repository: public.ecr.aws/p0i0a9q8/unionoperator
      pullPolicy: IfNotPresent
      # Overrides the image tag whose default is the chart appVersion.
      tag: v0.0.17-b1 # UNION_OPERATOR_TAG

    imagePullSecrets: [ ]
    nameOverride: ""
    fullnameOverride: ""

    serviceAccount:
      # Specifies whether a service account should be created
      create: true
      # Annotations to add to the service account
      annotations: { }
      # The name of the service account to use.
      # If not set and create is true, a name is generated using the fullname template
      name: ""

    podAnnotations:
      prometheus.io/path: /metrics
      prometheus.io/port: "10254"
      prometheus.io/scrape: "true"

    podSecurityContext: { }
    #      fsGroup: 65534
    #      runAsUser: 1001
    #      fsGroupChangePolicy: "Always"

    securityContext: { }
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

    service:
      type: ClusterIP
      port: 80

    resources:
      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      limits:
        cpu: "4"
        ephemeral-storage: 500Mi
        memory: "8Gi"
      requests:
        cpu: "1"
        ephemeral-storage: 100Mi
        memory: "500Mi"

    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 100
      targetCPUUtilizationPercentage: 80
      # targetMemoryUtilizationPercentage: 80

    nodeSelector: { }

    tolerations: [ ]

    affinity: { }

    configmapOverrides: { }
minio:
  # -- Replicas count for Minio deployment
  replicaCount: 1
  image:
    # -- Docker image for Minio deployment
    repository: ecr.flyte.org/bitnami/minio
    # -- Docker image tag
    tag: 2021.10.13-debian-10-r0
    # -- Docker image pull policy
    pullPolicy: IfNotPresent
  # -- Default resources requests and limits for Minio deployment
  resources:
    # -- Requests are the minimum set of resources needed for this pod
    requests:
      cpu: 10m
      memory: 128Mi
    # -- Limits are the maximum set of resources needed for this pod
    limits:
      cpu: 200m
      memory: 512Mi
  # -- Service settings for Minio
  service:
    annotations: { }
    type: NodePort
  # -- Annotations for Minio pods
  podAnnotations: { }
  # -- nodeSelector for Minio deployment
  nodeSelector: { }
  # -- tolerations for Minio deployment
  tolerations: [ ]
  # -- affinity for Minio deployment
  affinity: { }
